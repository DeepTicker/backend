const cron = require('node-cron');
const { exec } = require('child_process');
const dayjs = require('dayjs');
const { Client } = require('pg');
const dotenv = require('dotenv');
dotenv.config();

// Î°úÍ∑∏ Ìï®Ïàò
function log(message, type = 'info') {
    const timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss');
    const prefix = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${prefix} ${message}`);
}

// Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Ìï®Ïàò (promise Í∏∞Î∞ò)
function runCommand(command, label) {
    return new Promise((resolve, reject) => {
        log(`üü° [START] ${label}`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                log(`‚ùå [ERROR] ${label}: ${error.message}`, 'error');
                reject(error);
                return;
            }
            log(`‚úÖ [DONE] ${label}`, 'success');
            if (stdout) log(`üì§ [OUTPUT] ${label}:\n${stdout}`);
            if (stderr) log(`‚ö†Ô∏è [STDERR] ${label}:\n${stderr}`, 'error');
            resolve();
        });
    });
}

// Ï†ÑÏ≤¥ Îâ¥Ïä§ Ï≤òÎ¶¨ ÌùêÎ¶Ñ
async function processNews() {
    log('üîÅ Starting full news processing pipeline...');

    try {
        // 1. Crawl
        log('‚û°Ô∏è Step 1: Starting news crawling');
        await runCommand('npm run crawl:news', 'News Crawling');

        // 2. Classify
        log('‚û°Ô∏è Step 2: Starting news classification');
        await runCommand('npm run start:classify', 'News Classification');

        // 3. Process news terms
        log('‚û°Ô∏è Step 3: Starting news terms processing');
        await runCommand('npm run start:getTerms', 'News Terms Processing');

        // 4. Summarize
        log('‚û°Ô∏è Step 4: Starting news summarization');
        await runCommand('npm run start:geminiSummarize', 'News Summarization');

        // 5. Evaluate and resummarize if needed
        log('‚û°Ô∏è Step 5: Starting evaluation/resummarization loop');
        let badCount = Infinity;
        let loopCount = 0;

        const maxResummarizeAttempts = 2;

        while (badCount > 0 && loopCount < maxResummarizeAttempts) {
            loopCount++;
            log(`üîÅ Evaluation loop #${loopCount}`);

            // 4-1. Evaluate
            await runCommand('npm run start:evaluate', 'Summary Evaluation');

            // 4-2. Count bad summaries
            log('üîç Checking bad summaries...');
            badCount = await countBadSummaries();
            log(`üìä Bad summaries remaining: ${badCount}`);

            if (badCount > 0) {
                // 4-3. Resummarize
                log('üõ†Ô∏è Resummarizing low-quality summaries...');
                await runCommand('npm run start:resummarize', 'Resummarization');
            }
        }

        log('üéâ All summaries passed evaluation! Pipeline completed.');

    } catch (err) {
        log(`‚ùó Error in news pipeline: ${err.message}`, 'error');
    }
}

// üîç ÏöîÏïΩ ÌíàÏßàÏù¥ ÎÇÆÏùÄ Í∞úÏàò Ï°∞Ìöå
async function countBadSummaries() {
    return new Promise((resolve, reject) => {
        const client = new Client({
            host: process.env.DB_HOST,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            port: process.env.DB_PORT,
        });

        client.connect();

        const query = `
            SELECT COUNT(*) FROM news_summary
            WHERE rouge1 IS NOT NULL AND (rouge1 < 0.2 OR rougeL < 0.2 OR bleu < 0.2);
        `;

        client.query(query, (err, result) => {
            client.end();
            if (err) {
                log(`‚ùó PostgreSQL query error: ${err.message}`, 'error');
                reject(err);
            } else {
                const count = parseInt(result.rows[0].count, 10);
                resolve(count);
            }
        });
    });
}

// Îß§Ïùº Ïò§Ï†Ñ 9ÏãúÏóê Ïã§Ìñâ
cron.schedule('0 9 * * *', () => {
    log('üïò Scheduled run triggered at 9 AM');
    processNews();
});

// Ï¶âÏãú Ìïú Î≤à Ïã§Ìñâ
log('üöÄ Initial run started');
processNews();

// Ï¢ÖÎ£å Ìï∏Îì§ÎßÅ
process.on('SIGINT', () => {
    log('üõë Shutting down scheduler...');
    process.exit(0);
});
process.on('uncaughtException', (err) => {
    log(`‚ùó Uncaught Exception: ${err.message}`, 'error');
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    log(`‚ùó Unhandled Rejection: ${reason}`, 'error');
    process.exit(1);
});
