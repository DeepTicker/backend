// src/scripts/processSimilarNews.js

const { Client } = require('pg');
const { spawn } = require('child_process');
const dotenv = require('dotenv');
const dayjs = require('dayjs');
dotenv.config();

// Î°úÍ∑∏ Ìï®Ïàò
function log(message, type = 'info') {
    const timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss');
    const prefix = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${prefix} ${message}`);
}

// ÎåÄÌëú Îâ¥Ïä§Ïùò Ï†úÎ™©ÏúºÎ°ú Î≥∏Î¨∏ÏùÑ news_raw ‚Üí past_news ÏàúÏÑúÎ°ú Ï°∞Ìöå
async function fetchNewsContentByTitle(title) {
    const client = new Client({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      port: process.env.DB_PORT,
    });
    await client.connect();
  
    // 1Ï∞® ÏãúÎèÑ: news_raw
    let result = await client.query(
      `SELECT content FROM news_raw WHERE title = $1 LIMIT 1`,
      [title]
    );
    if (result.rows.length > 0) {
      await client.end();
      return result.rows[0].content;
    }
  
    // 2Ï∞® ÏãúÎèÑ: past_news
    result = await client.query(
      `SELECT content FROM past_news WHERE title = $1 LIMIT 1`,
      [title]
    );
    await client.end();
  
    if (result.rows.length > 0) return result.rows[0].content;
  
    return null;
  }

// üì∞ Îâ¥Ïä§ Ï†úÎ™©Í≥º ÏöîÏïΩ Í∞ÄÏ†∏Ïò§Í∏∞
async function getNewsForSimilarity() {
    const client = new Client({
        host: process.env.DB_HOST,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME,
        port: process.env.DB_PORT,
    });
    await client.connect();

    const query = `
        SELECT nr.id, nr.title, nr.content, ns.summary
        FROM news_raw nr
        JOIN news_summary ns ON nr.id = ns.news_id
        WHERE ns.level = 'Í≥†Í∏â'
        ORDER BY nr.id DESC
        LIMIT 100;
    `;

    const result = await client.query(query);
    await client.end();
    return result.rows;
}

// üîç ÎåÄÌëú Îâ¥Ïä§ 1Í±¥ Ï∂îÏ∂ú
async function getTopSimilarNews(summaryText) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        const pythonProcess = spawn('python', ['src/scripts/run_similarity_cluster.py', summaryText]);

        pythonProcess.stdout.on('data', (data) => {
            chunks.push(data.toString());
        });


        pythonProcess.on('close', (code) => {
            if (code !== 0) return reject(new Error(`run_similarity_cluster.py exited with code ${code}`));

            try {
                const output = chunks.join('');
                const parsed = JSON.parse(output);
                if (parsed.date && parsed.title) {
                    resolve({ date: parsed.date, title: parsed.title });
                } else {
                    reject(new Error("ÎåÄÌëú Îâ¥Ïä§ Ï∂îÏ∂ú Ïã§Ìå® (JSON Î¨¥Ìö®)"));
                }
            } catch (err) {
                reject(new Error("ÎåÄÌëú Îâ¥Ïä§ Ï∂îÏ∂ú Ïã§Ìå® (JSON ÌååÏã± Ïã§Ìå®)"));
            }
        });
    });
}

// üìà Ï£ºÍ∞Ä Î∂ÑÏÑù Ïã§Ìñâ
async function runStockChangeAnalysis(date, content) {
    return new Promise((resolve, reject) => {
        const pythonProcess = spawn('python', ['src/scripts/get_stock_change.py', date, content]);

        pythonProcess.stdout.on('data', (data) => {
            log(`üìä Stock change result:\n${data.toString()}`);
        });

        pythonProcess.stderr.on('data', (data) => {
            log(`‚ö†Ô∏è Stock change error: ${data.toString()}`, 'error');
        });

        pythonProcess.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`get_stock_change.py exited with code ${code}`));
            }
        });
    });
}

// üîÑ Ïú†ÏÇ¨ Îâ¥Ïä§ + Ï£ºÍ∞Ä Î∂ÑÏÑù Ï†ÑÏ≤¥ Ïã§Ìñâ
async function processSimilarNews() {
    log('üîÑ Starting full analysis (similarity + stock change)...');

    try {
        const news = await getNewsForSimilarity();
        log(`üì∞ Loaded ${news.length} news articles.`);

        for (const article of news) {
            const summaryText = `${article.title} ${article.summary}`;
            log(`‚û°Ô∏è Processing news ID ${article.id}`);

            // ÎåÄÌëú Îâ¥Ïä§ Ï∂îÏ∂ú
            const similar = await getTopSimilarNews(summaryText);
            log(`‚úÖ Representative news: ${similar.date} / ${similar.title}`);

            // Ìï¥Îãπ ÎÇ†Ïßú Îâ¥Ïä§ Î≥∏Î¨∏ Ï∞æÍ∏∞
            function normalizeText(str) {
                return str
                    .normalize("NFKC")
                    .replace(/\s+/g, ' ')
                    .replace(/[\u200B-\u200D\uFEFF]/g, '') // zero-width Î¨∏Ïûê Ï†úÍ±∞
                    .trim();
            }

            console.log("üîç ÎπÑÍµêÏö© Ï†úÎ™© Ï∂úÎ†•");
            for (const n of news) {
                console.log("[DB Ï†úÎ™©]", normalizeText(n.title));
            }
            console.log("[ÎåÄÌëú Îâ¥Ïä§ Ï†úÎ™©]", normalizeText(similar.title));


            const newsContent = await fetchNewsContentByTitle(similar.title);
            if (!newsContent) {
            log(`‚ö†Ô∏è Original content not found in DB for "${similar.title}"`, 'error');
            continue;
            }

            // Ï£ºÍ∞Ä Î≥ÄÌôî Î∂ÑÏÑù
            await runStockChangeAnalysis(similar.date, newsContent);

            // Îã§Ïùå Í∏∞ÏÇ¨ Ï≤òÎ¶¨ Ï†Ñ ÎåÄÍ∏∞
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        log('‚úÖ All news processed successfully!');

    } catch (err) {
        log(`‚ùó Error: ${err.message}`, 'error');
        process.exit(1);
    }
}

// Ïã§Ìñâ
processSimilarNews();
